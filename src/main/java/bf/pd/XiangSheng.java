/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bf.pd;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.houbb.opencc4j.util.ZhConverterUtil;
import org.apache.commons.io.FileUtils;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class XiangSheng {

    private static HashMap<String, Set<String>> downLoadedTracks;
    private static Set<String> artistWhiteList;
    private static Set<String> trackWhiteList;

    public static void main(String[] args) throws Exception {
        Rename.main(null);
        XiangShengLib.main(null);

        if (args.length != 1) {
            System.out.println("XiangShengDownloader url");
            return;
        }

        String albumUrl = args[0];

        if (downLoadedTracks == null)
            downLoadedTracks = XiangShengLib.downLoadedTracks();

        if (artistWhiteList == null)
            artistWhiteList = XiangShengLib.allArtist();
        if (trackWhiteList == null)
            trackWhiteList = XiangShengLib.allTracks();

        int pageCount = DownXmly.getPageCount(albumUrl);
        for (int i = 1; i <= pageCount + 1; i++) {
            onePage(albumUrl + "p" + i + "/", i);
        }
        Rename.main(null);
        XiangShengLib.main(null);
    }

    private static boolean onePage(String albumUrl, int pageNum) throws Exception {
        System.out.println(albumUrl);
        String[] split = albumUrl.split("https://www.ximalaya.com/");
        String s = split[1].split("/")[1];
        int albumNum = Integer.parseInt(s);

        Document page = JsoupUtil.urlToDoc(albumUrl);

        Elements tracks = page.select("#anchor_sound_list > div.sound-list._Qp > ul > li> div.text._Vc > a");
        String albumName = page.select("head > title").html();
        System.out.println(albumName);

        tracks:
        for (Element track : tracks) {
            String href = track.attr("href");
            String[] tried = href.split("/" + albumNum + "/");
            if (tried.length == 1)
                continue;
            String trackNum = tried[1];
            String trackUrl = "http://www.ximalaya.com/tracks/" + trackNum + ".json";
            String json = HttpUtil.url2Body(trackUrl);
            ObjectMapper mapper = new ObjectMapper();
            Map map = mapper.readValue(json, Map.class);
            String audioUrl = (String) map.get("play_path_64");
            if (audioUrl == null) {
                System.out.println(trackNum + ".json has error, skip");
                continue;
            }

            String title = (String) map.get("title");

            title = title.replaceAll("\"", "");
            title = title.replaceAll("\\?", "");
            title = title.replaceAll("\\|", "");
            title = title.replaceAll("/", "");
            title = ZhConverterUtil.toSimple(title);

            if (!white(albumName, title)) {
                System.out.println(title + ", not white, skip");
                continue;
            }

            for (String aTrack : downLoadedTracks.keySet()) {
                if (title.contains(aTrack)) {
                    Set<String> artists = downLoadedTracks.get(aTrack);
                    for (String artist : artists) {
                        if (title.contains(artist) || albumName.contains(artist)) {
                            System.out.println(title + " is downloaded, skip");
                            continue tracks;
                        }
                    }
                }
            }

            File folder = new File("C:\\media\\podcast\\" + "名家相声精选");
            Files.createDirectories(folder.toPath());

            File toDownload = new File(folder + "/" + title + ".m4a");
            if (toDownload.exists()) {
                if (toDownload.length() == 0) {
                    boolean delete = toDownload.delete();
                    System.out.println(toDownload + " size 0, deleted:" + delete);
                }
            }

            if (!toDownload.exists()) {
                System.out.println(title);
                FileUtils.copyURLToFile(new URL(audioUrl), toDownload);
            }
        }
        return true;
    }

    private static boolean white(String albumName, String title) {
        boolean foundArtist = false;
        for (String artist : artistWhiteList) {
            if (title.contains(artist) || albumName.contains(artist)) {
                foundArtist = true;
                break;
            }
        }

        boolean foundTrack = false;
        for (String track : trackWhiteList) {
            if (title.contains(track)) {
                foundTrack = true;
                break;
            }
        }
        return foundArtist && foundTrack;
    }

    private static boolean foundArtist(String title, String albumName) {

        return false;
    }
}
