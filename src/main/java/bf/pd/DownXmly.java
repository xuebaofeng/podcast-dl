/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bf.pd;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.houbb.opencc4j.util.ZhConverterUtil;
import org.apache.commons.io.FileUtils;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.net.URL;
import java.nio.file.Files;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DownXmly {


    public static void main(String[] args) throws Exception {

        if (args.length != 1) {
            System.out.println("DownXmly url");
            return;
        }

        String albumUrl = args[0];
        Document document = JsoupUtil.urlToDoc(albumUrl);
        String tracksNodeValue = document.select("#anchor_sound_list > div.head._Qp span").text();
        String tracksCountString = tracksNodeValue.split("声音（")[1].split("）")[0];
        int tracksCount = Integer.parseInt(tracksCountString.trim());
        int pageCount = tracksCount / 30;
        ExecutorService executorService = Executors.newFixedThreadPool(pageCount);
        for (int i = 1; i <= pageCount + 1; i++) {
            int finalI = i;
            executorService.submit(() -> {
                onePage(albumUrl + "p" + finalI + "/", finalI);
            });
        }
        executorService.shutdown();
        while (!executorService.isTerminated()) {
        }
    }

    private static void onePage(String albumUrl, int pageNum) {
        System.out.println(albumUrl);
        String[] split = albumUrl.split("https://www.ximalaya.com/");
        String s = split[1].split("/")[1];
        int albumNum = Integer.parseInt(s);

        Document page = JsoupUtil.urlToDoc(albumUrl);

        Elements tracks = page.select("#anchor_sound_list > div.sound-list._Qp > ul > li> div.text._Vc > a");
        String albumName = page.select("head > title").html();
        System.out.println(albumName);
        if (tracks.size() == 0) {
            if (pageNum == 1)
                throw new RuntimeException("empty list:" + albumUrl);
            else
                return;
        }

        ExecutorService executorService = Executors.newFixedThreadPool(tracks.size());
        for (Element track : tracks) {
            executorService.submit(() -> {
                try {
                    downloadTrack(track);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        }
        executorService.shutdown();
        while (!executorService.isTerminated()) {
        }
    }

    private static void downloadTrack(Element track) throws Exception {
        String href = track.attr("href");
        String trackNum = href.substring(href.lastIndexOf("/") + 1);
        String trackUrl = "http://www.ximalaya.com/tracks/" + trackNum + ".json";
        String json = HttpUtil.url2Body(trackUrl);
        ObjectMapper mapper = new ObjectMapper();
        Map map = mapper.readValue(json, Map.class);
        String audioUrl = (String) map.get("play_path_64");
        if (audioUrl == null) {
            System.out.println(trackNum + ".json has error, skip");
            return;
        }

        String title = (String) map.get("title");
        title = title.replaceAll("\"", "");
        title = title.replaceAll("\\?", "");
        title = title.replaceAll("\\|", "");
        title = title.replaceAll("/", "");
        title = ZhConverterUtil.toSimple(title);

        String albumTitle = (String) map.get("album_title");
        albumTitle = albumTitle.replaceAll("\\|", "");
        File folder = new File("C:\\media\\podcast\\" + albumTitle);
        Files.createDirectories(folder.toPath());

        File toDownload = new File(folder + "/" + title + ".m4a");
        deleteFile(toDownload);

        if (!toDownload.exists()) {
            System.out.println(title);
            try {
                FileUtils.copyURLToFile(new URL(audioUrl), toDownload);
            } finally {
                deleteFile(toDownload);
            }
        }
    }

    private static void deleteFile(File toDownload) {
        if (toDownload.exists()) {
            if (toDownload.length() == 0) {
                boolean delete = toDownload.delete();
                System.out.println(toDownload + " size 0, deleted:" + delete);
            }
        }
    }

}
